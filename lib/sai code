import 'package:flutter/material.dart';
import 'dart:async';
import 'package:flutter/services.dart'; // For input formatters

void main() {
  runApp(ParkingApp());
}

class ParkingApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Parking Payment',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        fontFamily: 'Roboto',
      ),
      home: ParkingPaymentScreen(),
    );
  }
}

class ParkingPaymentScreen extends StatefulWidget {
  @override
  _ParkingPaymentScreenState createState() => _ParkingPaymentScreenState();
}

class _ParkingPaymentScreenState extends State<ParkingPaymentScreen> {
  double totalAmount = 2.35;
  int userPoints = 0;
  int points = 0; // Track earned points
  Timer? countdownTimer;
  Duration remainingTime = Duration(hours: 1); // Start with 1 hour
  bool isPaid = false;
  bool isExtensionConfirmed = false; // To show "Pay Now" button for extended time
  TextEditingController extendTimeController = TextEditingController();

  // Function to start the countdown after payment is made
  void startCountdown() {
    countdownTimer = Timer.periodic(Duration(seconds: 1), (timer) {
      setState(() {
        if (remainingTime.inSeconds > 0) {
          remainingTime = remainingTime - Duration(seconds: 1);
        } else {
          countdownTimer?.cancel();
        }
      });
    });
  }

  // Function to simulate leaving early and adding points
  void leaveEarly() {
    if (countdownTimer != null) {
      countdownTimer?.cancel();
    }

    // Calculate time left and convert to hours for point calculation
    double hoursLeft = remainingTime.inMinutes / 60;
    int pointsEarned = (hoursLeft * 100).round();

    setState(() {
      userPoints += pointsEarned;
      points += pointsEarned; // Accumulate points in the new variable
      remainingTime = Duration.zero;
      totalAmount = 0; // Parking session ends
    });

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Parking Ended'),
          content: Text('You earned $pointsEarned points for leaving early!'),
          actions: <Widget>[
            TextButton(
              child: Text('OK'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  // Function to extend parking time
  void extendTime(int extraHours) {
    setState(() {
      remainingTime += Duration(hours: extraHours); // Add extra hours to remaining time
      totalAmount += extraHours * 2.35; // Charge $2.35 per extra hour
      isExtensionConfirmed = true; // Show "Pay Now" button for extended time
    });
  }

  // Function to format remaining time in hours and minutes
  String formatTimeLeft() {
    if (remainingTime.inMinutes < 60) {
      return '${remainingTime.inMinutes} minutes';
    } else {
      int hours = remainingTime.inHours;
      int minutes = remainingTime.inMinutes.remainder(60);
      return '${hours}h ${minutes}m';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Parking Payment'),
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              // Parking Icon
              Icon(Icons.local_parking, size: 100, color: Colors.blueAccent),
              SizedBox(height: 20),
              // Parking payment details
              Text(
                'Total Amount Due',
                style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
              ),
              Text(
                '\$${totalAmount.toStringAsFixed(2)}',
                style: TextStyle(fontSize: 30, fontWeight: FontWeight.bold, color: Colors.green),
              ),
              SizedBox(height: 20),
              // Display parking time left
              Text(
                'Parking Time Left: ${formatTimeLeft()}',
                style: TextStyle(fontSize: 18, color: Colors.black54),
              ),
              SizedBox(height: 40),
              // Payment button
              if (!isPaid)
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      isPaid = true;
                      startCountdown(); // Start countdown after payment
                    });
                    showDialog(
                      context: context,
                      builder: (context) {
                        return AlertDialog(
                          title: Text('Payment Successful'),
                          content: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Text('You have paid \$$totalAmount for your parking.'),
                              SizedBox(height: 20),
                              // Extend Time Input after payment
                              TextField(
                                controller: extendTimeController,
                                keyboardType: TextInputType.number,
                                inputFormatters: <TextInputFormatter>[
                                  FilteringTextInputFormatter.digitsOnly
                                ], // Allow only digits
                                decoration: InputDecoration(
                                  labelText: 'Extend parking by (hours)',
                                  border: OutlineInputBorder(),
                                ),
                              ),
                            ],
                          ),
                          actions: <Widget>[
                            TextButton(
                              child: Text('OK'),
                              onPressed: () {
                                Navigator.of(context).pop();
                              },
                            ),
                            TextButton(
                              child: Text('Extend Time'),
                              onPressed: () {
                                int extraHours = int.tryParse(extendTimeController.text) ?? 0;
                                if (extraHours > 0) {
                                  extendTime(extraHours);
                                  Navigator.of(context).pop();
                                }
                              },
                            ),
                          ],
                        );
                      },
                    );
                  },
                  child: Padding(
                    padding: const EdgeInsets.symmetric(vertical: 15.0, horizontal: 40.0),
                    child: Text('Pay Now', style: TextStyle(fontSize: 20)),
                  ),
                  style: ElevatedButton.styleFrom(
                    primary: Colors.green,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                  ),
                ),
              SizedBox(height: 20),
              // Display Pay Now button for extended time
              if (isExtensionConfirmed)
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      isExtensionConfirmed = false; // Reset the confirmation
                    });
                    showDialog(
                      context: context,
                      builder: (context) {
                        return AlertDialog(
                          title: Text('Extended Time Payment Successful'),
                          content: Text('You have paid for your extended parking time.'),
                          actions: <Widget>[
                            TextButton(
                              child: Text('OK'),
                              onPressed: () {
                                Navigator.of(context).pop();
                              },
                            ),
                          ],
                        );
                      },
                    );
                  },
                  child: Padding(
                    padding: const EdgeInsets.symmetric(vertical: 15.0, horizontal: 40.0),
                    child: Text('Pay Now for Extended Time', style: TextStyle(fontSize: 18)),
                  ),
                  style: ElevatedButton.styleFrom(
                    primary: Colors.orange,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                  ),
                ),
              SizedBox(height: 20),
              // Leave Early Button
              ElevatedButton(
                onPressed: leaveEarly,
                child: Padding(
                  padding: const EdgeInsets.symmetric(vertical: 15.0, horizontal: 40.0),
                  child: Text('Leave Early', style: TextStyle(fontSize: 20)),
                ),
                style: ElevatedButton.styleFrom(
                  primary: Colors.blueAccent,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
              ),
              SizedBox(height: 40),
              // Show total points earned from leaving early
              Text(
                'Total Points Earned: $points',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.deepPurple),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
