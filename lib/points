import 'package:flutter/material.dart';

void main() {
  runApp(PointsApp());
}

class PointsApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: PointsPage(),
    );
  }
}

class PointsPage extends StatefulWidget {
  @override
  _PointsPageState createState() => _PointsPageState();
}

class _PointsPageState extends State<PointsPage> {
  int points = 500; // User starts with 500 points
  bool isRedeemed = false;

  // Method to handle redemption
  void redeem(int cost) {
    if (points >= cost) {
      setState(() {
        points -= cost;
        isRedeemed = true;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Redeemed!')),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Not enough points to redeem!')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Row(
          children: [
            Icon(Icons.flash_on, color: Colors.blue),
            SizedBox(width: 5),
            Text(
              '$points Points',
              style: TextStyle(
                color: Colors.blueAccent,
                fontWeight: FontWeight.bold,
                fontSize: 18,
              ),
            ),
          ],
        ),
        backgroundColor: Colors.black,
      ),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Text(
              'Points',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Colors.black,
              ),
            ),
          ),
          Expanded(
            child: GridView.builder(
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                crossAxisSpacing: 10.0,
                mainAxisSpacing: 10.0,
              ),
              itemCount: 4,
              padding: const EdgeInsets.all(16.0),
              itemBuilder: (BuildContext context, int index) {
                // Define different options for the four cards
                List<int> pointCosts = [500, 1000, 2000, 4000];
                List<String> timeDurations = [
                  '2 hours -- FREE parking',
                  '4 hours -- FREE parking',
                  '8 hours -- FREE parking',
                  '16 hours -- FREE parking'
                ];

                // Color based on index
                Color cardColor = index == 0
                    ? Colors.lightGreenAccent
                    : Colors.lightBlueAccent;

                return GestureDetector(
                  onTap: !isRedeemed && points >= pointCosts[index]
                      ? () => redeem(pointCosts[index])
                      : null,
                  child: Container(
                    decoration: BoxDecoration(
                      color: isRedeemed && index == 0
                          ? Colors.grey
                          : cardColor,
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(
                          Icons.electric_car, // Updated icon
                          size: 50,
                          color: Colors.blueAccent,
                        ),
                        SizedBox(height: 10),
                        Text(
                          '${pointCosts[index]} points',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.blueAccent,
                          ),
                        ),
                        SizedBox(height: 5),
                        Text(
                          timeDurations[index],
                          textAlign: TextAlign.center,
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.blueGrey,
                          ),
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
