import 'package:flutter/material.dart';
import 'dart:async';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Telepark',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: HomePage(),
    );
  }
}

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  double carX = 150; // Starting x position of the car
  double carY = 175; // Starting y position of the car
  double angle = 0;
  bool navigating = false;
  bool paymentPromptVisible = false;
  String? destinationMessage = '';

  List<ParkingZone> parkingZones = [
    ParkingZone(x: 100, y: 450, isAvailable: true),
    ParkingZone(x: 200, y: 450, isAvailable: false),
    ParkingZone(x: 300, y: 450, isAvailable: true),
    ParkingZone(x: 400, y: 200, isAvailable: false),
    ParkingZone(x: 500, y: 200, isAvailable: true),
  ];

  String searchQuery = '';
  String? selectedLocation = '';
  int currentIndex = 0; // Track the selected bottom navigation index

  void startNavigation() {
    setState(() {
      navigating = true;
      destinationMessage = '';
    });

    int step = 0;
    Timer.periodic(Duration(seconds: 1), (timer) {
      setState(() {
        if (step < 10) {
          // Move down towards Chipotle
          carY += 25; // Adjust the value based on how much movement you want per second
        } else if (step < 15) {
          // Move right towards Chipotle
          carX += 90; // Adjust the value to simulate moving to the right
        } else if (step < 20) {
          // Move up to park above Chipotle
          carY += 5; // Continue moving up
        }

        // End navigation after 20 seconds
        if (step == 19) {
          navigating = false;
          destinationMessage = 'Location Reached!';
          timer.cancel();
        }

        // Prevent the car from going below the Y coordinate of the parking meters
        if (carY < 200) {
          carY = 200; // Stop at the height of parking meters
        }

        step++;
      });
    });
  }

  void payForParking() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Payment Successful'),
        content: Text('You have paid \$2.35 for 2 hours.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('OK'),
          ),
        ],
      ),
    );
  }

  void onBottomNavTapped(int index) {
    setState(() {
      currentIndex = index;
    });
    if (index == 1) {
      // Navigate to Profile Page
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => AccountPage()),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Telepark')),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: TextField(
              decoration: InputDecoration(
                labelText: 'Search for a location',
                border: OutlineInputBorder(),
                suffixIcon: Icon(Icons.search),
              ),
              onChanged: (value) {
                setState(() {
                  searchQuery = value;
                  selectedLocation = (value.toLowerCase().contains('chipotle')) ? "255 Main St, Cambridge, MA 02142" : null;
                });
              },
            ),
          ),
          if (selectedLocation != null && !navigating)
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: ElevatedButton(
                onPressed: startNavigation,
                child: Text('Start Navigation'),
              ),
            ),
          Expanded(
            child: Stack(
              children: [
                CustomPaint(
                  size: Size(double.infinity, double.infinity),
                  painter: MapPainter(carX, carY, angle, parkingZones),
                ),
                Positioned(
                  left: 350,
                  top: 50,
                  child: selectedLocation != null
                      ? Column(
                          children: [
                            Text(
                              'Chipotle: $selectedLocation',
                              style: TextStyle(color: Colors.red, fontWeight: FontWeight.bold),
                            ),
                            if (destinationMessage!.isNotEmpty)
                              Text(
                                destinationMessage!,
                                style: TextStyle(color: Colors.green, fontWeight: FontWeight.bold),
                              ),
                          ],
                        )
                      : Container(),
                ),
              ],
            ),
          ),
          if (navigating)
            Center(child: CircularProgressIndicator()), // Loading indicator
          if (paymentPromptVisible)
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: ElevatedButton(
                onPressed: payForParking,
                child: Text('Pay Now: \$2.35 for 2 hours'),
              ),
            ),
        ],
      ),
      bottomNavigationBar: BottomNavigationBar(
        items: [
          BottomNavigationBarItem(
            icon: Icon(Icons.home),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person),
            label: 'Profile',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.flash_on),
            label: 'Points',
          ),
        ],
        currentIndex: currentIndex,
        onTap: onBottomNavTapped,
      ),
    );
  }
}

class ParkingZone {
  final double x;
  final double y;
  final bool isAvailable;

  ParkingZone({required this.x, required this.y, required this.isAvailable});
}

class MapPainter extends CustomPainter {
  final double carX;
  final double carY;
  final double angle;
  final List<ParkingZone> parkingZones;

  MapPainter(this.carX, this.carY, this.angle, this.parkingZones);

  @override
  void paint(Canvas canvas, Size size) {
    Paint roadPaint = Paint()..color = Colors.grey[800]!;
    canvas.drawRect(Rect.fromLTWH(0, size.height * 0.2, size.width, size.height * 0.6), roadPaint);

    Paint lanePaint = Paint()..color = Colors.yellow;
    for (double i = 0; i < size.width; i += 40) {
      canvas.drawLine(Offset(i, size.height * 0.5), Offset(i + 20, size.height * 0.5), lanePaint);
    }

    Paint greenPaint = Paint()..color = Colors.green;
    Paint redPaint = Paint()..color = Colors.red;

    // Draw Parking Zones
    for (var zone in parkingZones) {
      Paint zonePaint = zone.isAvailable ? greenPaint : redPaint;
      canvas.drawRect(Rect.fromLTWH(zone.x, zone.y, 50, 5), zonePaint);
    }

    // Draw Chipotle Location (represented by a circle) at bottom right
    double chipotleX = size.width - 50; // X coordinate for Chipotle
    double chipotleY = size.height * 0.8; // Y coordinate for Chipotle
    Paint chipotlePaint = Paint()..color = Colors.green;
    canvas.drawCircle(Offset(chipotleX, chipotleY), 15, chipotlePaint); // Draw circle with radius 15

    // Draw the car
    canvas.save();
    canvas.translate(carX, carY);
    canvas.rotate(angle);
    Paint carPaint = Paint()..color = Colors.blue;
    canvas.drawRect(Rect.fromLTWH(-15, -10, 30, 20), carPaint);
    canvas.drawCircle(Offset(-10, 10), 5, Paint()..color = Colors.black);
    canvas.drawCircle(Offset(10, 10), 5, Paint()..color = Colors.black);
    canvas.restore();
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return true;
  }
}

// Account Page Class
class AccountPage extends StatefulWidget {
  const AccountPage({Key? key}) : super(key: key);

  @override
  _AccountPageState createState() => _AccountPageState();
}

class _AccountPageState extends State<AccountPage> {
  // Text editing controllers to manage text input fields
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _phoneController = TextEditingController();
  final TextEditingController _usernameController = TextEditingController();

  // Form key to validate form fields
  final _formKey = GlobalKey<FormState>();

  @override
  void initState() {
    super.initState();
    // Pre-fill the fields with some assumed initial data
    _nameController.text = "John Doe";
    _emailController.text = "john.doe@example.com";
    _phoneController.text = "123-456-7890";
    _usernameController.text = "johndoe";
  }

  @override
  void dispose() {
    _nameController.dispose();
    _emailController.dispose();
    _phoneController.dispose();
    _usernameController.dispose();
    super.dispose();
  }

  // Function to handle the form submission
  void _submitForm() {
    if (_formKey.currentState!.validate()) {
      // Perform your submission logic here
      print("Name: ${_nameController.text}");
      print("Email: ${_emailController.text}");
      print("Phone: ${_phoneController.text}");
      print("Username: ${_usernameController.text}");
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Profile updated successfully!')));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Account Profile')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              TextFormField(
                controller: _nameController,
                decoration: InputDecoration(labelText: 'Name'),
                validator: (value) => value!.isEmpty ? 'Please enter your name' : null,
              ),
              TextFormField(
                controller: _emailController,
                decoration: InputDecoration(labelText: 'Email'),
                validator: (value) => value!.isEmpty ? 'Please enter your email' : null,
              ),
              TextFormField(
                controller: _phoneController,
                decoration: InputDecoration(labelText: 'Phone Number'),
                validator: (value) => value!.isEmpty ? 'Please enter your phone number' : null,
              ),
              TextFormField(
                controller: _usernameController,
                decoration: InputDecoration(labelText: 'Username'),
                validator: (value) => value!.isEmpty ? 'Please enter a username' : null,
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _submitForm,
                child: Text('Update Profile'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
